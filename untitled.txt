 getUserHiddens: builder.query({
            query: ({ userId }) => ({
                url: `/users/${userId}/hiddens`,
                validateStatus: (response, result) => {
                    return response.status === 200 && !result.isError;
                }
            }),

            providesTags: (result, error, arg) => {
                if (result?.ids) {
                    return [
                        { type: "UHidden", id: "LIST" },
                        ...result.ids.map(id => ({ type: "UHidden", id }))
                    ];
                } else return [{ type: "UHidden", id: "LIST" }];
            }
        }),
        addNewUserHidden: builder.mutation({
            query: ({ userId, hiddenId }) => ({
                url: `/users/${userId}/hiddens/${hiddenId}`,
                method: "POST",
                responseHandler: "text"
            }),

            invalidatesTags: [{ type: "UHidden", id: "LIST" }]
        }),
        updateUserHidden: builder.mutation({
            query: ({ userId, hiddenId }) => ({
                url: `/users/${userId}/hiddens/${hiddenId}}`,
                method: "PATCH",
                responseHandler: "text"
            }),
            invalidatesTags: (result, error, arg) => [
                { type: "UHidden", id: arg.id }
            ]
        }),
        deleteUserHidden: builder.mutation({
            query: ({ userId, hiddenId }) => ({
                url: `/users/${userId}/hiddens/${hiddenId}`,
                method: "DELETE",
                responseHandler: "text"
            }),
            invalidatesTags: (result, error, arg) => [
                { type: "UHidden", id: arg.id }
            ]
        }),